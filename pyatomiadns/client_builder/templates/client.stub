#
# Copyright (c) 2012, SeJo IT BVBA
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#    This product includes software developed by the <organization>.
# 4. Neither the name of the <organization> nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SeJo IT BVBA ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
import json
import urllib2


class AtomiaClient():
    """The AtomiaClient plugs in on the json API from atomiadns.
    """

    def __init__(self, url, email, password):
        """Initalizes the AtomiaClient Object,

        The main task for AtomiaClient is to provide all possible API functions that can be executed on the atomiadns soap api.
        We however do not use the SOAP implementation but the json implementation.

        :param url: URL for the atomiadns.json entrypoint
        :param email: email for the user, remember for admin functions one needs the admin email
        :param password: password for the user
        """
        self.url = url
        self.email = email
        self.password = password

    def request(self, method, data):
        req = urllib2.Request(url=self.url + "/" + method)
        req.add_header('X-Auth-Username', self.email)
        req.add_header('X-Auth-Password', self.password)
        req.add_data(data)
        response = urllib2.urlopen(req)
        return response.read()

    def process_response(self, response):
        print response
    {% for key,val in config.iteritems() %}
    def {{ key }}(self{% if val.args %}{%for arg in val.args%}, {{ arg }}{%endfor%}{% endif %}):
        """{{ val.docstring }}
        """
        arguments = [{% if val.args %}{% for arg in val.args %}{{ arg }},{% endfor %}{% endif %}]
        data = json.dumps(arguments)
        response = self.request("{{ key }}", data)
        return self.process_response(response)
    {% endfor %}
