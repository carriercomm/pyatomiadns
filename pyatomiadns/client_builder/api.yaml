GetAllZones:
 args: null
 docstring: "GetAllZones returns all the zone names that are defined. This is an ADMIN only method"
GetLabels:
 args:
   - "zone"
 docstring: "GetLabels returns all the labels for a certain zone.


      :param zone: `str` zone (example.org, sejo-it.be,...)"
GetZone:
 args:
   - "zone"
 docstring: "GetZone returns the complete zone info with all records


     :param zone: `str` zone (example.org, sejo-it.be,...)"
GetDnsRecords:
 args:
  - "zone"
  - "label"
 docstring: "GetRecord will fetch full record information for zone and label given"
AddZone:
 args:
  - "zonename"
  - "zonettl"
  - "mname"
  - "rname"
  - "refresh"
  - "retry"
  - "expire"
  - "minimum"
  - "nameservers"
  - "nameservergroup"
 docstring: "Add a zone to the Atomia DNS master database.


 :param zonename: `str` the name of the zone

 :param zonettl: `int` the ttl of the SOA-record and the NS-records

 :param mname: `str` the SOA mname field

 :param rname: `str` the SOA rname field

 :param refresh: `int` the SOA refresh field

 :param retry: `int` the SOA retry field

 :param expire: `int` the SOA expire field

 :param minimum: `int` the SOA minimum field

 :param nameservers: `str` a string of the hostnames of the nameservers for the zone comma separated within brackets ([\"dns1.example.org\",\"dns2.example.org\"])

 :param nameservergroup: `str` the nameserver group that should host the zone
 "
DeleteZone:
 args:
  - "zone"
 docstring: "Deletes a zone from the database.


 :param zone: `str` the name of the zone"
EditZone:
 args:
  - "zonename"
  - "zonettl"
  - "mname"
  - "rname"
  - "refresh"
  - "retry"
  - "expire"
  - "minimum"
  - "nameservers"
  - "nameservergroup"
 docstring: "Edits a zone. This is only for completeness, and could be done by editing the SOA and NS-records directly as well.


 :param zonename: `str` the name of the zone

 :param zonettl: `int` the ttl of the SOA-record and the NS-records

 :param mname: `str` the SOA mname field

 :param rname: `str` the SOA rname field

 :param refresh: `int` the SOA refresh field

 :param retry: `int` the SOA retry field

 :param expire: `int` the SOA expire field

 :param minimum: `int` the SOA minimum field

 :param nameservers: `str` a string of the hostnames of the nameservers for the zone comma separated within brackets ([\"dns1.example.org\",\"dns2.example.org\"])

 :param nameservergroup: `str` the nameserver group that should host the zone
 "
AddNameserver:
 args:
  - "nameserver"
  - "nameservergroup"
 docstring: "Add a nameserver as a subscriber of changes to the data set in this server.


 :param nameserver: `str` the servername to add as a subscriber

 :param nameservergroup: `str` the nameserver group that this nameserver should subscribe to changes for"
DeleteNameserver:
 args:
  - "nameserver"
 docstring: "Remove a nameserver as a subscriber of changes to the data set in this server.


 :param nameserver: `str` the servername to remove as a subscriber"
GetNameserver:
 args:
  - "nameserver"
 docstring: "Gets the group name that a nameserver is configured as a subscriber for.


 :param nameserver: `str` the servername to get information for"
ReloadAllZones:
 args: null
 docstring: "Mark all zones in the database as changed."
AddDnsRecords:
 args:
  - "zone"
  - "records"
 docstring: |
      Adds a list of records to a zone.


       A record dict is the following:
       {
            "ttl":  "3600",
            "label" : "@",
            "class" : "IN",
            "type" : "A",
            "rdata" : "192.168.0.1"
       }


       :param zone: `str` the name of the zone

       :param records: `list` list of dicts containing the records'
DeleteDnsRecords:
 args:
  - "zone"
  - "records"
 docstring: |
     Removes the given records.

     One should only provide the labels in a following format

     '[{"label": "www"}, {"label": "bleh"}]'

AddDNSSECKey:
 args:
  - "algorithm"
  - "keysize"
  - "keytype"
  - "activated"
 docstring: 'Adds a DNSSEC key to the database.

  default algorithm:  RSASHA256
  for KSK use keysize 2048, for ZSK use 1024

  :param algorithm: `str` defaults to RSASHA256
  :param keysize: `int` size of key in bit (1024, 2048,...)
  :param keytype: `str` KSK or ZSK
  :param activated: `str` yes or no'
AddNameserverGroup:
 args:
  - "groupname"
 docstring: 'Add a nameserver group.

  :param groupname: `str` name of the group you wish to add'
DeleteNameServerGroup:
 args:
  - "groupname"
 docstring: 'Delete a nameserver group.

  :param groupname: `str` name of the group you wish to delete'
AddAccount:
 args:
 - "email"
 - "password_soap"
 docstring: ' Add an account for soap

 :param email: `str` email used as login
 :param paswword_soap: `str` password for the user'
DeleteAccount:
 args:
 - "email"
 docstring: 'Removes a soap account

 :param email: `str` email of the account'

Noop:
 docstring: "Noop command used to authenticate"

FindZones:
 args:
 - "email"
 - "pattern"
 - "count"
 - "offset"
 docstring: ' Finds zones according to the pattern

 :param email: `str` email of the account
 :param pattern: `str` the pattern to search for with SQL LIKE semantics
 :param count: `int` the max number of zones to return
 :param offset: `int` the offset of the first zone to return
 '

EditDnsRecords:
 args:
 - "zone"
 - "records"
 docstring: 'Edits the records for a certain label

 :param zone: `str` zone name
 :param records: `list` for format see AddDnsRecords
 '
GetZoneBinary:
 args:
 - "zone"
 docstring: 'Gets the binary data for the zone, this can be used to restore zones

 :param zone: `str` zone name
 '
RestoreZoneBinary:
 args:
 - "zone"
 - "nameservergroup"
 - "data"
 docstring: 'Restores the zone

 :param zone: `str` zone name
 :param nameservergroup: `str` name of the nameserver group
 :param data: `str` data to restore
 '
